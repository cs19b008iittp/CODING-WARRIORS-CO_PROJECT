                                                         COMPUTER ORGANIZATION AND ARCHITECTURE 
                                                                         PROJECT 
                                                                   #Coding Warriors# 
 
AIM: Develop a simulator on the lines of QtSPIM  
 
Our Simulator supports MIPS (Microprocessor without Interlocked Pipelined Stages) instructions and can read in an assembly file, execute the instructions, and in the end display the contents of the registers, and the memory. 
We choose C++ programming language for developing this simulator. 
The MIPS instruction-set architecture:  
	• It is a load-store architecture that uses general-purpose registers.  
	• It has only two addressing modes, displacement and immediate, but can synthesize other important modes from them.  
	• It supports 8-, 16-, 32-, and 64-bit integers, and 32- and 64- bit IEEE 754 floating-point numbers.  
	• It has an orthogonal set of instructions to manipulate these data types.  
	• It has separate comparison and branching instructions. (This is an example of making the common case fast.) 
 MIPS has thirty-two 64-bit general-purpose registers, named R0, R1, … , R31. R0 always contains 0 (loading it with another value has no effect). It has 32 floating-point registers, which can hold either single precision (32-bit) or double-precision (64-bit) values. 
 
MIPS INSTRUCTIONS: 

• Arithmetic Instructions  
INSTRUCTION  	                        SYNTAX                    	        MEANING 
ADD (Addition) 	                        ADD R1, R2, R3 	                    	R1 = R2 + R3 
ADDI (Add immediate)        	        ADDI R1, R2, 100 	                R1 = R2 + 100 
SUB (Subtract) 	                        SUB R1, R2, R3 	                    	R1 = R2 - R3 
ADDU (Add unsigned) 	                ADDU R1, R2, R3 	                R1 = R2 + R3 
ADDIU (Add immediate unsigned) 	        ADDIU R1, R2, 100 	                R1 = R2 + 100 
		 
 
• Load/Store Instructions 
INSTRUCTION 	                        SYNTAX 	                            	MEANING 
LW (Load Word) 	                        LW R1, 100(R2) 	                   	R1←Mem [R2+100] 
SW (Store Word) 	                SW R1, 100(R2) 	                   	Mem[R2+100] ←R1 
 
• Conditional/Branching Instructions 
INSTRUCTION 	                        SYNTAX 	                            	MEANING 
BEQ (Branch on equal) 	                BEQ R1, R2, 100 	                if (R1==R2) goto PC+4+100 
BNE (Branch on not equal) 	        BNE R1, R2, 100 	                if (R1!=R2) goto PC+4+100 
SLT (Set on less than) 	                SLT R1, R2, R3 	                    	if (R2<R3) R1←1; else R1 =0 
 
• Unconditional Jump Instructions 
INSTRUCTION 	                        SYNTAX 	                            	MEANING 
J (Jump) 	                        J 100 	                        	Goto 100 
JR (Jump Register) 	               	JR R7 	                        	Goto R7 
JAL (Jump and Link) 	                JAL 100 	                        R31←PC+4; goto 100 
JALR (Jump and Link Register) 	        JALR R7 	                        R31←PC+4; PC←R8 
 
Function Implementations: 
    These are the function and instructions we implemented in phase 1 of project 
• Memory Array function 
		○  This function is declared globally  
		○ This collects the argument indexes from parser function and stores the values in arrays. 
		○ This is not declared dynamically. 
		○  Here we also store the values of the array which we  have to sort.
• Register function 
		○ The register functions store all the values of register and prints at the end. 
•  PARSER function: 
		○ The Parse function enables the user to parse the data in one field in the source file and write the "parts" of the data to a field or fields in the target file. 
		○ We used parser function to read the file line by line from main function. 
		○  We described pc counter and pin, the ‘pc counter’ counts the total no. of lines in the given file and ‘pin’ is counts the instruction number of that particular instruction. 
		○ If the word is equal to a particular instruction the parser sends the line and parameters to that particular function. 
		○ The before sending as arguments/parameters to the function the string the converted to int/double. 
		○ This reads and store indexes value. 
• ADD function 
		○ The argument indexes are loaded from parser function to Add function. 
		○ The add function performs the addition of registers with last two parameters as indexes and the value of result is stored in register with index as first parameter. 
		○ ADD R1, R2, R3 [R1 = R2 + R3] 
• ADDI function 
		○ The argument indexes are loaded from parser function to Addi function. 
		○ The addi function performs the addition of registers with indexes as last two parameters and the value is stored in register with index as first parameter. 
		○ ADD R1, R2, 100 [R1 = R2 + 100] 
• BEQ function 
		○ The argument indexes are loaded from parser function to Beq function. 
		○ The beq function checks the equality of first two arguments and for last parameter jump function is called(if the arguments are equal). 
		○ BEQ R1, R2, 100 [if (R1!=R2) jumps to next instruction] 
• SLT function 
		○ The argument indexes are loaded from parser function to Slt function. 
		○ The slt function compares the last two arguments and 0 or 1 is stored in first argument. 
		○ SLT R1, R2, R3 [if (R2<R3) R1←1; else R1 =0] 
• JUMP function 
		○ The pin which indicates the instruction number is sent to Jump function by the parser. 
                ○  Here we open the file read line by line and store them in a string array.
		○  The jump function goes to the given instruction number (i.e, pin) 
                ○ J 100 [goto 100 and executes the instructions line by line continuolsy from that given index in that string array].
	
• LOAD function 
		○ The argument indexes are loaded from parser function to Load Word function. 
                ○ This function takes the index of last parameter and fetches for value stored in that particlar index of register (suppose that value be 3) then it loads value stored in the memory from mem[3] and assigns to register with index as first parameter
                ○ LW R1, R2 [R1 ← R2] 
• STORE function 
	        ○ The argument indexes are loaded from parser function to Load Word function. 
                ○ This function takes the index of first parameter and fetches for value stored in that particlar index of register (suppose that value be 3) then it takes that value stored in the memory from mem[3] and assigns to register with index as second parameter
                ○ SW R1, R2 [R1-> R2]
• SUB function 
		○ The arguments are loaded from parser function to Sub function. 
		○ The sub function performs the addition of registers of last two parameters and the value is stored in register with first parameter as index. 
		○ SUB R1, R2, R3 [R1 = R2 - R3] 
• usage:
                ○ the source code folder has main code contains the whole program implimented in c++.
                ○ a file bubblesort.asm is there in which bubble sort algorithm is implimented in assembly code.
                ○ And other file called sum.asm which is implimented in assembly code to get the sum of 10 numbers.
                ○ To run and check our bubble sort program just copy paste the code in source code in any online compiler and also attach the file bubblesort.asm along with it while execution.

• FINAL OUTPUT 
               ○ At the final we display all the values stored in the registers (R0 to R31) and we also display the sorted array at the end.
	 
• PHASE 2

• Functions implemented
	       ○ pipeline with stalls(no data forwarding) function
	       ○ pipeline with data  forwarding function
	       ○ branch function
• Main assumptions:
               ○ here an every instruction is considered of Rtype a 2d array array[1000][3] is considered
	       ex: where array[1][0]=destinaton register, array[1][1]=source register 1, array[1][2] = source register 2
	           rows- represent instruction number , columns = 3 it is fixed.
	       ○  an array of strings (line1[1000]) which stores the instructions which are dependent is declared.
               ○  an integer clock_2 is declared to count number of cycles required to execute assembly code.
	       
• pipeline_withstalls function:
               ○ As we have already stored all reisters in array[][3], here we check dependencies of source registers of current instruction with the destination registers of previous 2 intructions.
	       ○ If there is a dependency of registers we increase count of number of stalls.
	       ○ we also count number of branch instructions and increase count of number of stalls.
	       ○ we add these two to the total number of cycles (pipelined) i.e, no dependencies.
	       ○ we also print the instructions which are dependent in the given assembly code.
	       ○ print ipc = 1/cpi , cpi = total no cycles / total no. of instructions .
	       
• pipeline_withdataforwarding function: 
               ○ here we just calculate the total number of branch instructions and increase count of number of stalls.
	       ○ we add this count to total number cycles taken for pipelined (with no dependencies) and print it.
	       ○ ipc for pipeline with data forwarding is calculated and printed.

• branch function :
               ○ here we just print the branch instructions in the assembly code.
 
• Final output:
               ○ according the user input the pipeline with data forwarding or pipeline without data forwarding is selected.
	       ○ we print total number of instructions, total number of stalls, print the dependent instructions of assembly code.
	       ○ print the ipc (instruction per cycle) of the given assembly code. 
 
 • PHASE 3
 
 
 
